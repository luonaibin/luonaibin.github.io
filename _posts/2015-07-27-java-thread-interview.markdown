---
layout:     post
title:      "Java多线程面试题目"
date:       2015-07-27
---

<style type="text/css">
p{
	text-indent: 2em;
}
.post img {
  margin-bottom: 0rem;
}
</style>

<p class="intro">
	<span class="dropcap">面试中</span>开发者精通多线程技术并且有丰富的Java程序开发、调试、优化经验，所以线程相关的问题在面试中经常会被提到。
</p>

----------
###1）什么是线程？
* 线程，是程序执行流的最小单元。一个标准的线程由线程ID,当前指令指针(PC),寄存器集合和堆栈(Stack)组成。
* 线程是进程重点额一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中比不可少的资源，但它可与同属一个进程的其他线程共享进程所拥有的资源。

###2）线程和进程的区别？
* **1）调度：**在传统操作系统中，拥有资源和独立调度的基本单位都是进程。引入线程后，线程是独立调度的基本单位，进程是拥有资源的基本单位。在同一进程中，线程的切换不会引起进程的切换。在不同进程中进行线程切换，则会引起进程切换。
* **2）拥有资源：**不论是传统的还是引入线程的操作系统，进程都是拥有资源的基本单位，线程不拥有资源，但线程可以共享其隶属进程的系统资源。
* **3）并发性：**在引入线程的操作系统中，不仅进程可以可以并发执行，而且同一进程内的多个线程也可以并发执行，从而使操作系统具有更好的并发性，大大提高了系统吞吐量。
* **4）系统开销：**创建和撤销进程时，系统都要位置分配或回收资源，如内存空间，I/O 设备等，因此操作系统所付出的开销远大于创建或撤销线程的开销。
* **5）地址空间和其他资源：**进程的地址空间之间相互独立，同一进程的各线程之间共享进程的资源，某进程内的线程对于其他进程不可见。
* **6）通信方面：**进程间通信需要借助操作系统，而线程间可以直接读写进程数据段来进行通信。


###3）如何在Java中实现线程？
* 继承java.lang.Thrad类
* 实现java.lang.Runnable接口重写run()方法


###4）用Runnable还是Thread？
* Java不支持类的多重继承，但允许你调用多个接口。所以如果你要继承其他类，当然是调用Runnable接口好了。


###5）Thread类中的start()和run()方法有什么区别？
* start()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果不一样。
* 当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。


###6）Java中Runnable和Callable有什么不同？
Runnable和Callable都代表那些要在不同的线程中执行的任务。Runnable从JDK1.0开始就有了，Callable是在JDK1.5增加的。

* 它们的主要区别是Callable的 call() 方法可以返回值和抛出异常，而Runnable的run()方法没有这些功能。
* Callable可以返回装载有计算结果的Future对象。